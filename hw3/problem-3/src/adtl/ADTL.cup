package adtl;

import java_cup.runtime.*;
import java.util.*;
import adtl.Lexer.*;
import adtl.ast.*;

parser code {:
    public void syntax_error(java_cup.runtime.Symbol current) {
        Token t = (Token) current;
        throw new SyntaxError("Syntax error in line " + t.line + " '" + t.toText() + "'");
    }
:};

/* Terminals (tokens returned by the scanner). */
terminal                    REV, ASSERT, CHOOSE, IN, LOCK, IF, RETURN, NEW, ELSE, SET;
terminal                    LCBR, SEMI, LT, LP, COMMA, RP, DOT, RCBR, COLON, AT;
terminal                    DIVIDE, LTE, MINUS, BAR, NOT, PLUS, ASSIGN, LAND, ASSIGN_PLUS, LOR, NEQ, ASSIGN_MINUS, EQ, GTE, TIMES, GT;
terminal                    UMINUS;
terminal String             ID, QUOTE;
terminal Integer            INT;

/* Non terminals */
non terminal ADT            ADT;
non terminal ElementList    ElementList;
non terminal Element        Element;
non terminal FieldDef       FieldDef;
non terminal Type           Type;
non terminal MethodDef      MethodDef;
non terminal Args           Args;
non terminal StmtList       StmtList;
non terminal Stmt           Stmt;
non terminal Assign         Assign;
non terminal Expr           Expr;
non terminal AssignedArgs   AssignedArgs;
non terminal PathExpr       PathExpr;
non terminal PathElement    PathElement;
non terminal Stmt           SingleOrBlockStmt;

/* Precedences */
precedence left ELSE, COMMA;
precedence left LOR, LAND;
precedence nonassoc NOT, LT, LTE, GT, GTE, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS;
precedence nonassoc IN;

/* The grammar */
ADT                 ::= ID:name LCBR  ElementList:elements RCBR
                        {: RESULT = new ADT(name, elements); :}
                        ;

ElementList         ::= ElementList:elementList Element:element
                        {:
                           elementList.append(element);
                           RESULT = elementList;
                        :}
                        |
                        Element:element
                        {: RESULT = new ElementList(element); :}
                        ;

Element             ::= FieldDef:fieldDef
                        {: RESULT = fieldDef; :}
                        |
                        MethodDef: methodDef
                        {: RESULT = methodDef; :}
                        ;

FieldDef            ::= ID:name COLON Type:type SEMI
                        {: RESULT = new FieldDef(name, type); :}
                        ;

Type                ::= ID:name
                        {: RESULT = new Type(name); :}
                        |
                        SET
                        {: RESULT = new Type(Type.setTypeName); :}
                        ;

MethodDef           ::= ID:name LP Args:args RP LCBR StmtList:stmts RCBR
                        {: RESULT = new MethodDef(name, args, stmts); :}
                        |
                        ID:name LP Args:args RP LCBR RCBR
                        {: RESULT = new MethodDef(name, args, new StmtList()); :}
                        |
                        ID:name LP RP LCBR StmtList:stmts RCBR
                        {: RESULT = new MethodDef(name, new Args(), stmts); :}
                        |
                        ID:name LP RP LCBR RCBR
                        {: RESULT = new MethodDef(name, new Args(), new StmtList()); :}
                        ;

Args                ::= Args:args COMMA ID:arg COLON Type:t
                        {:
                           args.append(arg, t);
                           RESULT = args;
                        :}
                        |
                        ID:arg COLON Type:t
                        {: RESULT = new Args(arg, t); :}
                        ;

StmtList            ::= StmtList:stmtList Stmt:stmt
                        {:
                           stmtList.append(stmt);
                           RESULT = stmtList;
                        :}
                        |
                        Stmt:stmt
                        {: RESULT = new StmtList(stmt); :}
                        ;

Stmt                ::= RETURN Expr:retExpr SEMI
                        {: RESULT = new Return(retExpr); :}
                        |
                        Assign:assign SEMI
                        {: RESULT = assign; :}
                        |
                        IF LP Expr:cond RP SingleOrBlockStmt:thenExpr
                        {: RESULT = new Condition(cond, thenExpr); :}
                        |
                        IF LP Expr:cond RP SingleOrBlockStmt:thenExpr ELSE SingleOrBlockStmt:elseExpr
                        {: RESULT = new Condition(cond, thenExpr, elseExpr); :}
                        |
                        ASSERT Expr:cond SEMI
                        {: RESULT = new Assert(cond, new String()); :}
                        |
                        ASSERT Expr:cond COLON QUOTE:message SEMI
                        {: RESULT = new Assert(cond, message); :}
                        |
                        LOCK PathExpr:pathExpr SEMI
                        {: RESULT = new Lock(pathExpr); :}
                        ;

Assign              ::= PathExpr:lhs ASSIGN_PLUS Expr:expr
                        {: RESULT = new Assign(lhs, new BinaryExpr(Ops.PLUS,lhs,expr)); :}
                        |
                        PathExpr:lhs ASSIGN_MINUS Expr:expr
                        {: RESULT = new Assign(lhs, new BinaryExpr(Ops.MINUS,lhs,expr)); :}
                        |
                        PathExpr:lhs ASSIGN Expr:rhs
                        {: RESULT = new Assign(lhs, rhs); :}
                        ;

SingleOrBlockStmt   ::= Stmt:stmt
                        {: RESULT = stmt; :}
                        |
                        LCBR StmtList:stmtList RCBR
                        {: RESULT = stmtList; :}
                        ;

Expr                ::= CHOOSE:sym_num Expr:setExpr
                        {: RESULT = new Choose(setExpr); :}
                        |
                        INT:integer
                        {: RESULT = new INT(integer.intValue()); :}
                        |
                        BAR Expr:expr BAR
                        {: RESULT = new Size(expr); :}
                        |
                        NEW Type:type LP AssignedArgs:args RP
                        {: RESULT = new NewExpr(type, args); :}
                        |
                        MINUS Expr:expr
                        {: RESULT = new BinaryExpr(Ops.MINUS, new INT(0), expr); :}
                        %prec UMINUS
                        |
                        Expr:expr_lhs PLUS Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.PLUS, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs TIMES Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.TIMES, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs MINUS Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.MINUS, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs DIVIDE Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.DIVIDE, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs LT Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.LT, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs LTE Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.LTE, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs GT Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.GT, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs GTE Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.GTE, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs EQ Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.EQ, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs NEQ Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.NEQ, expr_lhs, expr_rhs); :}
                        |
                        NOT Expr:subExpr
                        {: RESULT = new NotExpr(subExpr); :}
                        |
                        Expr:expr_lhs LAND Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.LAND, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs LOR Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.LOR, expr_lhs, expr_rhs); :}
                        |
                        Expr:expr_lhs IN Expr:expr_rhs
                        {: RESULT = new BinaryExpr(Ops.IN, expr_lhs, expr_rhs); :}
                        |
                        PathExpr:pathExpr
                        {: RESULT = pathExpr; :}
                        |
                        LP Expr:expr RP
                        {: RESULT = expr; :}
                        ;

AssignedArgs        ::= AssignedArgs:args COMMA ID:arg ASSIGN Expr:val
                        {:
                           args.append(arg, val);
                           RESULT = args;
                        :}
                        |
                        ID:arg ASSIGN Expr:val
                        {: RESULT = new AssignedArgs(arg, val); :}
                        ;

PathExpr            ::= PathExpr:pathExpr DOT PathElement:pathElement
                        {:
                           pathExpr.append(pathElement);
                           RESULT = pathExpr;
                        :}
                        |
                        PathElement:pathElement
                        {: RESULT = new PathExpr(pathElement); :}
                        ;

PathElement         ::= ID:name
                        {: RESULT = new PathElement(name, false, false); :}
                        |
                        ID:name AT
                        {: RESULT = new PathElement(name, false, true); :}
                        |
                        REV LP ID:name RP
                        {: RESULT = new PathElement(name, true, false); :}
                        |
                        REV LP ID:name RP AT
                        {: RESULT = new PathElement(name, true, true); :}
                        ;