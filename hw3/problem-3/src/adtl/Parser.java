
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 24 22:44:48 IST 2013
//----------------------------------------------------

package adtl;

import java_cup.runtime.*;
import java.util.*;
import adtl.Lexer.*;
import adtl.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 24 22:44:48 IST 2013
  */
public @SuppressWarnings(value={"all"}) class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\006\000\002\006\003\000\002\006\003\000" +
    "\002\007\011\000\002\007\006\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\012\004\000\002\012" +
    "\003\000\002\013\005\000\002\013\004\000\002\013\007" +
    "\000\002\013\011\000\002\013\005\000\002\013\007\000" +
    "\002\013\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\021\003\000\002\021\005\000\002\015" +
    "\004\000\002\015\003\000\002\015\005\000\002\015\007" +
    "\000\002\015\004\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\005\000\002\016\005\000\002\017\005\000\002" +
    "\017\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\006\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\051\004\001\002\000\004\016\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\051\010\001\002\000\006\021\017\026\020\001" +
    "\002\000\006\025\ufffe\051\ufffe\001\002\000\006\025\ufffd" +
    "\051\ufffd\001\002\000\006\025\016\051\010\001\002\000" +
    "\006\025\ufffc\051\ufffc\001\002\000\006\025\uffff\051\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\051\025\001" +
    "\002\000\006\015\023\051\021\001\002\000\012\017\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\001\002\000\004\017\024\001" +
    "\002\000\012\017\ufff9\021\ufff9\022\ufff9\023\ufff9\001\002" +
    "\000\006\025\ufffb\051\ufffb\001\002\000\004\026\172\001" +
    "\002\000\006\022\170\023\ufff5\001\002\000\004\023\030" +
    "\001\002\000\010\016\031\025\ufff7\051\ufff7\001\002\000" +
    "\016\004\032\005\040\010\041\011\035\012\042\051\037" +
    "\001\002\000\004\021\164\001\002\000\020\004\032\005" +
    "\040\010\041\011\035\012\042\025\163\051\037\001\002" +
    "\000\054\007\uffce\017\uffce\020\uffce\023\uffce\024\161\026" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\001\002\000\004\021\146\001\002" +
    "\000\020\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\025" +
    "\ufff2\051\ufff2\001\002\000\056\007\uffcd\017\uffcd\020\uffcd" +
    "\023\uffcd\024\uffcd\026\uffcd\027\145\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001" +
    "\002\000\024\004\032\006\057\013\054\021\053\032\051" +
    "\033\056\034\060\051\037\053\052\001\002\000\006\004" +
    "\032\051\037\001\002\000\024\004\032\006\057\013\054" +
    "\021\053\032\051\033\056\034\060\051\037\053\052\001" +
    "\002\000\010\036\050\040\046\043\047\001\002\000\004" +
    "\017\045\001\002\000\022\004\ufff0\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\025\ufff0\051\ufff0\001\002\000\024" +
    "\004\032\006\057\013\054\021\053\032\051\033\056\034" +
    "\060\051\037\053\052\001\002\000\024\004\032\006\057" +
    "\013\054\021\053\032\051\033\056\034\060\051\037\053" +
    "\052\001\002\000\024\004\032\006\057\013\054\021\053" +
    "\032\051\033\056\034\060\051\037\053\052\001\002\000" +
    "\024\004\032\006\057\013\054\021\053\032\051\033\056" +
    "\034\060\051\037\053\052\001\002\000\044\007\uffe4\017" +
    "\uffe4\020\uffe4\023\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\035\uffe4\037\uffe4\041\uffe4\042\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\001\002\000\024\004\032\006\057" +
    "\013\054\021\053\032\051\033\056\034\060\051\037\053" +
    "\052\001\002\000\006\015\023\051\021\001\002\000\036" +
    "\007\065\017\uffe8\020\077\030\064\031\070\032\063\035" +
    "\073\037\066\041\074\042\071\044\072\045\067\046\076" +
    "\047\075\001\002\000\024\004\032\006\057\013\054\021" +
    "\053\032\051\033\056\034\060\051\037\053\052\001\002" +
    "\000\024\004\032\006\057\013\054\021\053\032\051\033" +
    "\056\034\060\051\037\053\052\001\002\000\024\004\032" +
    "\006\057\013\054\021\053\032\051\033\056\034\060\051" +
    "\037\053\052\001\002\000\044\007\uffd2\017\uffd2\020\uffd2" +
    "\023\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035" +
    "\uffd2\037\uffd2\041\uffd2\042\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\001\002\000\030\007\065\017\uffd6\023\uffd6\026" +
    "\uffd6\030\064\032\063\033\uffd6\035\073\037\uffd6\041\uffd6" +
    "\046\076\001\002\000\024\004\032\006\057\013\054\021" +
    "\053\032\051\033\056\034\060\051\037\053\052\001\002" +
    "\000\024\004\032\006\057\013\054\021\053\032\051\033" +
    "\056\034\060\051\037\053\052\001\002\000\024\004\032" +
    "\006\057\013\054\021\053\032\051\033\056\034\060\051" +
    "\037\053\052\001\002\000\024\004\032\006\057\013\054" +
    "\021\053\032\051\033\056\034\060\051\037\053\052\001" +
    "\002\000\024\004\032\006\057\013\054\021\053\032\051" +
    "\033\056\034\060\051\037\053\052\001\002\000\024\004" +
    "\032\006\057\013\054\021\053\032\051\033\056\034\060" +
    "\051\037\053\052\001\002\000\024\004\032\006\057\013" +
    "\054\021\053\032\051\033\056\034\060\051\037\053\052" +
    "\001\002\000\024\004\032\006\057\013\054\021\053\032" +
    "\051\033\056\034\060\051\037\053\052\001\002\000\024" +
    "\004\032\006\057\013\054\021\053\032\051\033\056\034" +
    "\060\051\037\053\052\001\002\000\024\004\032\006\057" +
    "\013\054\021\053\032\051\033\056\034\060\051\037\053" +
    "\052\001\002\000\024\004\032\006\057\013\054\021\053" +
    "\032\051\033\056\034\060\051\037\053\052\001\002\000" +
    "\024\004\032\006\057\013\054\021\053\032\051\033\056" +
    "\034\060\051\037\053\052\001\002\000\024\004\032\006" +
    "\057\013\054\021\053\032\051\033\056\034\060\051\037" +
    "\053\052\001\002\000\030\007\065\017\uffdc\023\uffdc\026" +
    "\uffdc\030\064\032\063\033\uffdc\035\073\037\uffdc\041\uffdc" +
    "\046\076\001\002\000\044\007\065\017\uffdf\020\uffdf\023" +
    "\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf" +
    "\037\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\001\002\000\030\007\065\017\uffda\023\uffda\026\uffda" +
    "\030\064\032\063\033\uffda\035\073\037\uffda\041\uffda\046" +
    "\076\001\002\000\044\007\065\017\uffd4\020\077\023\uffd4" +
    "\026\uffd4\030\064\031\070\032\063\033\uffd4\035\073\037" +
    "\uffd4\041\uffd4\042\071\044\072\045\067\046\076\047\075" +
    "\001\002\000\044\007\065\017\uffe0\020\uffe0\023\uffe0\026" +
    "\uffe0\030\064\031\uffe0\032\uffe0\033\uffe0\035\uffe0\037\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046\076\047\uffe0\001" +
    "\002\000\030\007\065\017\uffd8\023\uffd8\026\uffd8\030\064" +
    "\032\063\033\uffd8\035\073\037\uffd8\041\uffd8\046\076\001" +
    "\002\000\030\007\065\017\uffd7\023\uffd7\026\uffd7\030\064" +
    "\032\063\033\uffd7\035\073\037\uffd7\041\uffd7\046\076\001" +
    "\002\000\030\007\065\017\uffdb\023\uffdb\026\uffdb\030\064" +
    "\032\063\033\uffdb\035\073\037\uffdb\041\uffdb\046\076\001" +
    "\002\000\030\007\065\017\uffd9\023\uffd9\026\uffd9\030\064" +
    "\032\063\033\uffd9\035\073\037\uffd9\041\uffd9\046\076\001" +
    "\002\000\044\007\065\017\uffd5\020\077\023\uffd5\026\uffd5" +
    "\030\064\031\070\032\063\033\uffd5\035\073\037\uffd5\041" +
    "\uffd5\042\071\044\072\045\067\046\076\047\075\001\002" +
    "\000\042\017\uffd3\020\uffd3\023\uffd3\026\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\035\uffd3\037\uffd3\041\uffd3\042\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002\000\044\007" +
    "\065\017\uffdd\020\uffdd\023\uffdd\026\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\035\uffdd\037\uffdd\041\uffdd\042\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\001\002\000\044\007\065" +
    "\017\uffde\020\uffde\023\uffde\026\uffde\030\064\031\uffde\032" +
    "\uffde\033\uffde\035\uffde\037\uffde\041\uffde\042\uffde\044\uffde" +
    "\045\uffde\046\076\047\uffde\001\002\000\044\007\065\017" +
    "\uffe5\020\077\023\uffe5\026\uffe5\030\064\031\070\032\063" +
    "\033\uffe5\035\073\037\066\041\074\042\071\044\072\045" +
    "\067\046\076\047\075\001\002\000\036\007\065\020\077" +
    "\030\064\031\070\032\063\033\117\035\073\037\066\041" +
    "\074\042\071\044\072\045\067\046\076\047\075\001\002" +
    "\000\044\007\uffe3\017\uffe3\020\uffe3\023\uffe3\026\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\037\uffe3\041\uffe3" +
    "\042\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\001\002\000" +
    "\004\021\121\001\002\000\004\051\122\001\002\000\004" +
    "\036\125\001\002\000\004\023\124\001\002\000\044\007" +
    "\uffe2\017\uffe2\020\uffe2\023\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\037\uffe2\041\uffe2\042\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002\000\024\004\032" +
    "\006\057\013\054\021\053\032\051\033\056\034\060\051" +
    "\037\053\052\001\002\000\036\007\065\020\077\023\uffd0" +
    "\030\064\031\070\032\063\035\073\037\066\041\074\042" +
    "\071\044\072\045\067\046\076\047\075\001\002\000\036" +
    "\007\065\020\077\023\130\030\064\031\070\032\063\035" +
    "\073\037\066\041\074\042\071\044\072\045\067\046\076" +
    "\047\075\001\002\000\044\007\uffd1\017\uffd1\020\uffd1\023" +
    "\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1" +
    "\037\uffd1\041\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\001\002\000\044\007\065\017\uffe1\020\uffe1\023\uffe1" +
    "\026\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\037" +
    "\uffe1\041\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\001\002\000\036\007\065\017\uffe9\020\077\030\064\031" +
    "\070\032\063\035\073\037\066\041\074\042\071\044\072" +
    "\045\067\046\076\047\075\001\002\000\036\007\065\017" +
    "\uffea\020\077\030\064\031\070\032\063\035\073\037\066" +
    "\041\074\042\071\044\072\045\067\046\076\047\075\001" +
    "\002\000\036\007\065\017\135\020\077\030\064\031\070" +
    "\032\063\035\073\037\066\041\074\042\071\044\072\045" +
    "\067\046\076\047\075\001\002\000\022\004\ufff1\005\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\025\ufff1\051\ufff1\001" +
    "\002\000\004\017\137\001\002\000\022\004\uffeb\005\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\014\uffeb\025\uffeb\051\uffeb\001" +
    "\002\000\040\007\065\017\142\020\077\026\141\030\064" +
    "\031\070\032\063\035\073\037\066\041\074\042\071\044" +
    "\072\045\067\046\076\047\075\001\002\000\004\052\143" +
    "\001\002\000\022\004\uffed\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\025\uffed\051\uffed\001\002\000\004\017\144" +
    "\001\002\000\022\004\uffec\005\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\025\uffec\051\uffec\001\002\000\054\007\uffcc" +
    "\017\uffcc\020\uffcc\023\uffcc\024\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\001\002\000\024\004\032\006\057\013\054\021\053" +
    "\032\051\033\056\034\060\051\037\053\052\001\002\000" +
    "\036\007\065\020\077\023\150\030\064\031\070\032\063" +
    "\035\073\037\066\041\074\042\071\044\072\045\067\046" +
    "\076\047\075\001\002\000\020\004\032\005\040\010\041" +
    "\011\035\012\042\016\151\051\037\001\002\000\016\004" +
    "\032\005\040\010\041\011\035\012\042\051\037\001\002" +
    "\000\022\004\uffef\005\uffef\010\uffef\011\uffef\012\uffef\014" +
    "\154\025\uffef\051\uffef\001\002\000\022\004\uffe7\005\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\014\uffe7\025\uffe7\051\uffe7\001" +
    "\002\000\020\004\032\005\040\010\041\011\035\012\042" +
    "\016\151\051\037\001\002\000\022\004\uffee\005\uffee\010" +
    "\uffee\011\uffee\012\uffee\014\uffee\025\uffee\051\uffee\001\002" +
    "\000\020\004\032\005\040\010\041\011\035\012\042\025" +
    "\160\051\037\001\002\000\020\004\ufff3\005\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\025\ufff3\051\ufff3\001\002\000\022\004" +
    "\uffe6\005\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\025\uffe6" +
    "\051\uffe6\001\002\000\006\004\032\051\037\001\002\000" +
    "\052\007\uffcf\017\uffcf\020\uffcf\023\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\001\002\000\006\025\ufff8\051\ufff8\001\002\000" +
    "\004\051\165\001\002\000\004\023\166\001\002\000\056" +
    "\007\uffcb\017\uffcb\020\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\167\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\001\002\000\054\007\uffca\017\uffca" +
    "\020\uffca\023\uffca\024\uffca\026\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\001" +
    "\002\000\004\051\025\001\002\000\004\023\ufff6\001\002" +
    "\000\006\015\023\051\021\001\002\000\006\022\ufff4\023" +
    "\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\012\004\010" +
    "\005\011\007\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\014\005\011\007\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\026\011\025\001\001\000\004\006\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\032\013" +
    "\035\014\043\017\042\020\033\001\001\000\002\001\001" +
    "\000\012\013\156\014\043\017\042\020\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\137\017\060\020\033\001\001\000" +
    "\006\017\135\020\033\001\001\000\010\015\133\017\060" +
    "\020\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\132\017\060\020\033\001\001" +
    "\000\010\015\131\017\060\020\033\001\001\000\010\015" +
    "\054\017\060\020\033\001\001\000\010\015\130\017\060" +
    "\020\033\001\001\000\002\001\001\000\010\015\126\017" +
    "\060\020\033\001\001\000\004\006\117\001\001\000\002" +
    "\001\001\000\010\015\115\017\060\020\033\001\001\000" +
    "\010\015\114\017\060\020\033\001\001\000\010\015\061" +
    "\017\060\020\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\113\017\060\020\033\001\001\000\010" +
    "\015\112\017\060\020\033\001\001\000\010\015\111\017" +
    "\060\020\033\001\001\000\010\015\110\017\060\020\033" +
    "\001\001\000\010\015\107\017\060\020\033\001\001\000" +
    "\010\015\106\017\060\020\033\001\001\000\010\015\105" +
    "\017\060\020\033\001\001\000\010\015\104\017\060\020" +
    "\033\001\001\000\010\015\103\017\060\020\033\001\001" +
    "\000\010\015\102\017\060\020\033\001\001\000\010\015" +
    "\101\017\060\020\033\001\001\000\010\015\100\017\060" +
    "\020\033\001\001\000\010\015\077\017\060\020\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\125" +
    "\017\060\020\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\146\017\060\020\033" +
    "\001\001\000\002\001\001\000\014\013\152\014\043\017" +
    "\042\020\033\021\151\001\001\000\014\012\155\013\035" +
    "\014\043\017\042\020\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\152\014\043\017\042\020\033" +
    "\021\154\001\001\000\002\001\001\000\012\013\156\014" +
    "\043\017\042\020\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\161\020\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\170\011" +
    "\025\001\001\000\002\001\001\000\004\006\172\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(java_cup.runtime.Symbol current) {
        Token t = (Token) current;
        throw new SyntaxError("Syntax error in line " + t.line + " '" + t.toText() + "'");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings(value={"all"}) public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PathElement ::= REV LP ID RP AT 
            {
              PathElement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathElement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PathElement ::= REV LP ID RP 
            {
              PathElement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathElement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PathElement ::= ID AT 
            {
              PathElement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathElement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PathElement ::= ID 
            {
              PathElement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathElement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PathExpr ::= PathElement 
            {
              PathExpr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PathExpr ::= PathElement DOT PathExpr 
            {
              PathExpr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PathExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AssignedArg ::= ID ASSIGN Expr 
            {
              AssignedArgs RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignedArg",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= LP Expr RP 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= PathExpr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= Expr IN Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= Expr LOR Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= Expr LAND Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= Expr NEQ Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= Expr GTE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= Expr LTE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= Expr DIVIDE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= NEW Type LP AssignedArg RP 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= BAR Expr BAR 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= INT 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= CHOOSE Expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SingleOrBlockStmt ::= LCBR StmtList RCBR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SingleOrBlockStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SingleOrBlockStmt ::= Stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SingleOrBlockStmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assign ::= PathExpr ASSIGN Expr 
            {
              Assign RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assign ::= PathExpr ASSIGN_MINUS Expr 
            {
              Assign RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Assign ::= PathExpr ASSIGN_PLUS Expr 
            {
              Assign RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assign",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= LOCK PathExpr SEMI 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= ASSERT Expr COLON QUOTE SEMI 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= ASSERT Expr SEMI 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= IF LP Expr RP SingleOrBlockStmt ELSE SingleOrBlockStmt 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= IF LP Expr RP SingleOrBlockStmt 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= Assign SEMI 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= RETURN Expr SEMI 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StmtList ::= Stmt 
            {
              StmtList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StmtList ::= StmtList Stmt 
            {
              StmtList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StmtList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Arg ::= ID COLON Type 
            {
              Args RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Arg",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ArgPart ::= Arg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgPart",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ArgPart ::= Arg COMMA ArgPart 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgPart",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDef ::= ID LP ArgPart RP 
            {
              MethodDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDef",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDef ::= ID LP ArgPart RP LCBR StmtList RCBR 
            {
              MethodDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDef",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= SET 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FieldDef ::= ID COLON Type SEMI 
            {
              FieldDef RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Element ::= MethodDef 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Element ::= FieldDef 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Element",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ElementList ::= Element 
            {
              ElementList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ElementList ::= ElementList Element 
            {
              ElementList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElementList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ADT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ADT start_val = (ADT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ADT ::= ID LCBR ElementList RCBR 
            {
              ADT RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElementList list = (ElementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ADT(name, list); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

