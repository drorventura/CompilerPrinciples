/* is_equal.asm
 * 
 */

IS_EQUAL:
	PUSH(FP);
	MOV(FP,SP);
	PUSH(R1);
	PUSH(R2);

	MOV(R1,FPARG(2));
	MOV(R2,FPARG(3));

	CMP(IND(R1),IND(R2));
	JUMP_NE(IS_EQ_FALSE);

/***********compare value********/
	CMP(IND(R1),T_CHAR);
	JUMP_EQ(CHECK_VALUES);
	
    CMP(IND(R1),T_INTEGER);
	JUMP_EQ(CHECK_VALUES);

    CMP(IND(R1),T_FRACTION);
	JUMP_EQ(CHECK_VALUES_FRAC);
	
    CMP(IND(R1),T_SYMBOL);
	JUMP_EQ(CHECK_VALUES);
/***********compare address ********/
	CMP(IND(R1),T_NIL);
	JUMP_EQ(CHECK_ADDRESS);
	
    CMP(IND(R1),T_VOID);
	JUMP_EQ(CHECK_ADDRESS);

	CMP(IND(R1),T_BOOL);
	JUMP_EQ(CHECK_ADDRESS);

	CMP(IND(R1),T_PAIR);
	JUMP_EQ(CHECK_ADDRESS);

	CMP(IND(R1),T_VECTOR);
	JUMP_EQ(CHECK_ADDRESS);

	CMP(IND(R1),T_STRING);
	JUMP_EQ(CHECK_ADDRESS);
	

CHECK_VALUES:
	CMP(INDD(R1,1),INDD(R2,1));
	JUMP_NE(IS_EQ_FALSE);
    JUMP(IS_EQ_TRUE);

CHECK_VALUES_FRAC:
	CMP(INDD(R1,1),INDD(R2,1));
	JUMP_NE(IS_EQ_FALSE);
	CMP(INDD(R1,2),INDD(R2,2));
	JUMP_NE(IS_EQ_FALSE);
    JUMP(IS_EQ_TRUE);

CHECK_ADDRESS:
	CMP(R1,R2);
	JUMP_EQ(IS_EQ_TRUE);
	JUMP(IS_EQ_FALSE);

IS_EQ_TRUE:
	MOV(R0,IMM(5));
	POP(R2);
	POP(R1);
	POP(FP);
	RETURN;	

IS_EQ_FALSE:
	MOV(R0,IMM(3));
	POP(R2);
	POP(R1);
	POP(FP);
	RETURN;
